{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/yaml/yaml.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","offSide","language","tokenPostfix","token","keywords","numberInteger","numberFloat","numberOctal","numberHex","numberInfinity","numberNaN","numberDate","escapes","tokenizer","root","include","cases","object","array","string","next","multiString","multiStringContinued","whitespace","comment","flowCollections","flowScalars","blockStyle","flowNumber","tagHandle","anchor"],"mappings":"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","file":"yaml.70134675.map","sourceRoot":"../public","sourcesContent":["export var conf = {\n    comments: {\n        lineComment: '#'\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        offSide: true\n    }\n};\nexport var language = {\n    tokenPostfix: '.yaml',\n    brackets: [\n        { token: 'delimiter.bracket', open: '{', close: '}' },\n        { token: 'delimiter.square', open: '[', close: ']' }\n    ],\n    keywords: ['true', 'True', 'TRUE', 'false', 'False', 'FALSE', 'null', 'Null', 'Null', '~'],\n    numberInteger: /(?:0|[+-]?[0-9]+)/,\n    numberFloat: /(?:0|[+-]?[0-9]+)(?:\\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,\n    numberOctal: /0o[0-7]+/,\n    numberHex: /0x[0-9a-fA-F]+/,\n    numberInfinity: /[+-]?\\.(?:inf|Inf|INF)/,\n    numberNaN: /\\.(?:nan|Nan|NAN)/,\n    numberDate: /\\d{4}-\\d\\d-\\d\\d([Tt ]\\d\\d:\\d\\d:\\d\\d(\\.\\d+)?(( ?[+-]\\d\\d?(:\\d\\d)?)|Z)?)?/,\n    escapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Directive\n            [/%[^ ]+.*$/, 'meta.directive'],\n            // Document Markers\n            [/---/, 'operators.directivesEnd'],\n            [/\\.{3}/, 'operators.documentEnd'],\n            // Block Structure Indicators\n            [/[-?:](?= )/, 'operators'],\n            { include: '@anchor' },\n            { include: '@tagHandle' },\n            { include: '@flowCollections' },\n            { include: '@blockStyle' },\n            // Numbers\n            [/@numberInteger(?![ \\t]*\\S+)/, 'number'],\n            [/@numberFloat(?![ \\t]*\\S+)/, 'number.float'],\n            [/@numberOctal(?![ \\t]*\\S+)/, 'number.octal'],\n            [/@numberHex(?![ \\t]*\\S+)/, 'number.hex'],\n            [/@numberInfinity(?![ \\t]*\\S+)/, 'number.infinity'],\n            [/@numberNaN(?![ \\t]*\\S+)/, 'number.nan'],\n            [/@numberDate(?![ \\t]*\\S+)/, 'number.date'],\n            // Key:Value pair\n            [/(\".*?\"|'.*?'|.*?)([ \\t]*)(:)( |$)/, ['type', 'white', 'operators', 'white']],\n            { include: '@flowScalars' },\n            // String nodes\n            [/.+$/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Mapping\n        object: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Mapping termination\n            [/\\}/, '@brackets', '@pop'],\n            // Flow Mapping delimiter\n            [/,/, 'delimiter.comma'],\n            // Flow Mapping Key:Value delimiter\n            [/:(?= )/, 'operators'],\n            // Flow Mapping Key:Value key\n            [/(?:\".*?\"|'.*?'|[^,\\{\\[]+?)(?=: )/, 'type'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\},]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Collection: Flow Sequence\n        array: [\n            { include: '@whitespace' },\n            { include: '@comment' },\n            // Flow Sequence termination\n            [/\\]/, '@brackets', '@pop'],\n            // Flow Sequence delimiter\n            [/,/, 'delimiter.comma'],\n            // Start Flow Style\n            { include: '@flowCollections' },\n            { include: '@flowScalars' },\n            // Scalar Data types\n            { include: '@tagHandle' },\n            { include: '@anchor' },\n            { include: '@flowNumber' },\n            // Other value (keyword or string)\n            [/[^\\],]+/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // Flow Scalars (quoted strings)\n        string: [\n            [/[^\\\\\"']+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/[\"']/, {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }]\n        ],\n        // First line of a Block Style\n        multiString: [\n            [/^( +).+$/, 'string', '@multiStringContinued.$1']\n        ],\n        // Further lines of a Block Style\n        //   Workaround for indentation detection\n        multiStringContinued: [\n            [/^( *).+$/, {\n                    cases: {\n                        '$1==$S2': 'string',\n                        '@default': { token: '@rematch', next: '@popall' }\n                    }\n                }]\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, 'white']\n        ],\n        // Only line comments\n        comment: [\n            [/#.*$/, 'comment']\n        ],\n        // Start Flow Collections\n        flowCollections: [\n            [/\\[/, '@brackets', '@array'],\n            [/\\{/, '@brackets', '@object']\n        ],\n        // Start Flow Scalars (quoted strings)\n        flowScalars: [\n            [/\"/, 'string', '@string.\"'],\n            [/'/, 'string', '@string.\\'']\n        ],\n        // Start Block Scalar\n        blockStyle: [\n            [/[>|][0-9]*[+-]?$/, 'operators', '@multiString']\n        ],\n        // Numbers in Flow Collections (terminate with ,]})\n        flowNumber: [\n            [/@numberInteger(?=[ \\t]*[,\\]\\}])/, 'number'],\n            [/@numberFloat(?=[ \\t]*[,\\]\\}])/, 'number.float'],\n            [/@numberOctal(?=[ \\t]*[,\\]\\}])/, 'number.octal'],\n            [/@numberHex(?=[ \\t]*[,\\]\\}])/, 'number.hex'],\n            [/@numberInfinity(?=[ \\t]*[,\\]\\}])/, 'number.infinity'],\n            [/@numberNaN(?=[ \\t]*[,\\]\\}])/, 'number.nan'],\n            [/@numberDate(?=[ \\t]*[,\\]\\}])/, 'number.date']\n        ],\n        tagHandle: [\n            [/\\![^ ]*/, 'tag']\n        ],\n        anchor: [\n            [/[&*][^ ]+/, 'namespace']\n        ]\n    }\n};\n"]}