{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/postiats/postiats.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","language","tokenPostfix","defaultToken","keywords","keywords_dlr","keywords_srp","irregular_keyword_list","keywords_types","keywords_effects","operators","token","symbols","IDENTFST","IDENTRST","symbolic","digit","digitseq0","xdigit","xdigitseq0","INTSP","FLOATSP","fexponent","fexponent_bin","deciexp","hexiexp","irregular_keywords","ESCHAR","start","tokenizer","root","regex","action","next","cases","nextEmbedded","lexing_COMMENT_block_ml","lexing_COMMENT_block_c","lexing_COMMENT_rest","lexing_EFFECT_commaseq0","lexing_EXTCODE","lexing_DQUOTE"],"mappings":"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","file":"postiats.402a7387.map","sourceRoot":"../public","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Artyom Shalkhakov. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *\n *  Based on the ATS/Postiats lexer by Hongwei Xi.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '//',\n        blockComment: ['(*', '*)'],\n    },\n    brackets: [['{', '}'], ['[', ']'], ['(', ')'], ['<', '>']],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '{', close: '}', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n    ]\n};\nexport var language = {\n    tokenPostfix: '.pats',\n    // TODO: staload and dynload are followed by a special kind of string literals\n    // with {$IDENTIFER} variables, and it also may make sense to highlight\n    // the punctuation (. and / and \\) differently.\n    // Set defaultToken to invalid to see what you do not tokenize yet\n    defaultToken: 'invalid',\n    // keyword reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing_token.dats\n    keywords: [\n        //\n        \"abstype\",\n        \"abst0ype\",\n        \"absprop\",\n        \"absview\",\n        \"absvtype\",\n        \"absviewtype\",\n        \"absvt0ype\",\n        \"absviewt0ype\",\n        //\n        \"as\",\n        //\n        \"and\",\n        //\n        \"assume\",\n        //\n        \"begin\",\n        //\n        /*\n                \"case\", // CASE\n        */\n        //\n        \"classdec\",\n        //\n        \"datasort\",\n        //\n        \"datatype\",\n        \"dataprop\",\n        \"dataview\",\n        \"datavtype\",\n        \"dataviewtype\",\n        //\n        \"do\",\n        //\n        \"end\",\n        //\n        \"extern\",\n        \"extype\",\n        \"extvar\",\n        //\n        \"exception\",\n        //\n        \"fn\",\n        \"fnx\",\n        \"fun\",\n        //\n        \"prfn\",\n        \"prfun\",\n        //\n        \"praxi\",\n        \"castfn\",\n        //\n        \"if\",\n        \"then\",\n        \"else\",\n        //\n        \"ifcase\",\n        //\n        \"in\",\n        //\n        \"infix\",\n        \"infixl\",\n        \"infixr\",\n        \"prefix\",\n        \"postfix\",\n        //\n        \"implmnt\",\n        \"implement\",\n        //\n        \"primplmnt\",\n        \"primplement\",\n        //\n        \"import\",\n        //\n        /*\n                \"lam\", // LAM\n                \"llam\", // LLAM\n                \"fix\", // FIX\n        */\n        //\n        \"let\",\n        //\n        \"local\",\n        //\n        \"macdef\",\n        \"macrodef\",\n        //\n        \"nonfix\",\n        //\n        \"symelim\",\n        \"symintr\",\n        \"overload\",\n        //\n        \"of\",\n        \"op\",\n        //\n        \"rec\",\n        //\n        \"sif\",\n        \"scase\",\n        //\n        \"sortdef\",\n        /*\n        // HX: [sta] is now deprecated\n        */\n        \"sta\",\n        \"stacst\",\n        \"stadef\",\n        \"static\",\n        /*\n                \"stavar\", // T_STAVAR\n        */\n        //\n        \"staload\",\n        \"dynload\",\n        //\n        \"try\",\n        //\n        \"tkindef\",\n        //\n        /*\n                \"type\", // TYPE\n        */\n        \"typedef\",\n        \"propdef\",\n        \"viewdef\",\n        \"vtypedef\",\n        \"viewtypedef\",\n        //\n        /*\n                \"val\", // VAL\n        */\n        \"prval\",\n        //\n        \"var\",\n        \"prvar\",\n        //\n        \"when\",\n        \"where\",\n        //\n        /*\n                \"for\", // T_FOR\n                \"while\", // T_WHILE\n        */\n        //\n        \"with\",\n        //\n        \"withtype\",\n        \"withprop\",\n        \"withview\",\n        \"withvtype\",\n        \"withviewtype\",\n    ],\n    keywords_dlr: [\n        \"$delay\",\n        \"$ldelay\",\n        //\n        \"$arrpsz\",\n        \"$arrptrsize\",\n        //\n        \"$d2ctype\",\n        //\n        \"$effmask\",\n        \"$effmask_ntm\",\n        \"$effmask_exn\",\n        \"$effmask_ref\",\n        \"$effmask_wrt\",\n        \"$effmask_all\",\n        //\n        \"$extern\",\n        \"$extkind\",\n        \"$extype\",\n        \"$extype_struct\",\n        //\n        \"$extval\",\n        \"$extfcall\",\n        \"$extmcall\",\n        //\n        \"$literal\",\n        //\n        \"$myfilename\",\n        \"$mylocation\",\n        \"$myfunction\",\n        //\n        \"$lst\",\n        \"$lst_t\",\n        \"$lst_vt\",\n        \"$list\",\n        \"$list_t\",\n        \"$list_vt\",\n        //\n        \"$rec\",\n        \"$rec_t\",\n        \"$rec_vt\",\n        \"$record\",\n        \"$record_t\",\n        \"$record_vt\",\n        //\n        \"$tup\",\n        \"$tup_t\",\n        \"$tup_vt\",\n        \"$tuple\",\n        \"$tuple_t\",\n        \"$tuple_vt\",\n        //\n        \"$break\",\n        \"$continue\",\n        //\n        \"$raise\",\n        //\n        \"$showtype\",\n        //\n        \"$vcopyenv_v\",\n        \"$vcopyenv_vt\",\n        //\n        \"$tempenver\",\n        //\n        \"$solver_assert\",\n        \"$solver_verify\",\n    ],\n    keywords_srp: [\n        //\n        \"#if\",\n        \"#ifdef\",\n        \"#ifndef\",\n        //\n        \"#then\",\n        //\n        \"#elif\",\n        \"#elifdef\",\n        \"#elifndef\",\n        //\n        \"#else\",\n        \"#endif\",\n        //\n        \"#error\",\n        //\n        \"#prerr\",\n        \"#print\",\n        //\n        \"#assert\",\n        //\n        \"#undef\",\n        \"#define\",\n        //\n        \"#include\",\n        \"#require\",\n        //\n        \"#pragma\",\n        \"#codegen2\",\n        \"#codegen3\",\n    ],\n    irregular_keyword_list: [\n        \"val+\",\n        \"val-\",\n        \"val\",\n        \"case+\",\n        \"case-\",\n        \"case\",\n        \"addr@\",\n        \"addr\",\n        \"fold@\",\n        \"free@\",\n        \"fix@\",\n        \"fix\",\n        \"lam@\",\n        \"lam\",\n        \"llam@\",\n        \"llam\",\n        \"viewt@ype+\",\n        \"viewt@ype-\",\n        \"viewt@ype\",\n        \"viewtype+\",\n        \"viewtype-\",\n        \"viewtype\",\n        \"view+\",\n        \"view-\",\n        \"view@\",\n        \"view\",\n        \"type+\",\n        \"type-\",\n        \"type\",\n        \"vtype+\",\n        \"vtype-\",\n        \"vtype\",\n        \"vt@ype+\",\n        \"vt@ype-\",\n        \"vt@ype\",\n        \"viewt@ype+\",\n        \"viewt@ype-\",\n        \"viewt@ype\",\n        \"viewtype+\",\n        \"viewtype-\",\n        \"viewtype\",\n        \"prop+\",\n        \"prop-\",\n        \"prop\",\n        \"type+\",\n        \"type-\",\n        \"type\",\n        \"t@ype\",\n        \"t@ype+\",\n        \"t@ype-\",\n        \"abst@ype\",\n        \"abstype\",\n        \"absviewt@ype\",\n        \"absvt@ype\",\n        \"for*\",\n        \"for\",\n        \"while*\",\n        \"while\"\n    ],\n    keywords_types: [\n        'bool',\n        'double',\n        'byte',\n        'int',\n        'short',\n        'char',\n        'void',\n        'unit',\n        'long',\n        'float',\n        'string',\n        'strptr'\n    ],\n    // TODO: reference for this?\n    keywords_effects: [\n        \"0\",\n        \"fun\",\n        \"clo\",\n        \"prf\",\n        \"funclo\",\n        \"cloptr\",\n        \"cloref\",\n        \"ref\",\n        \"ntm\",\n        \"1\" // all effects\n    ],\n    operators: [\n        \"@\",\n        \"!\",\n        \"|\",\n        \"`\",\n        \":\",\n        \"$\",\n        \".\",\n        \"=\",\n        \"#\",\n        \"~\",\n        //\n        \"..\",\n        \"...\",\n        //\n        \"=>\",\n        // \"=<\", // T_EQLT\n        \"=<>\",\n        \"=/=>\",\n        \"=>>\",\n        \"=/=>>\",\n        //\n        \"<\",\n        \">\",\n        //\n        \"><\",\n        //\n        \".<\",\n        \">.\",\n        //\n        \".<>.\",\n        //\n        \"->\",\n        //\"-<\", // T_MINUSLT\n        \"-<>\",\n    ],\n    brackets: [\n        { open: ',(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '`(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '%(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '\\'(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '\\'{', close: '}', token: 'delimiter.parenthesis' },\n        { open: '@(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '@{', close: '}', token: 'delimiter.brace' },\n        { open: '@[', close: ']', token: 'delimiter.square' },\n        { open: '#[', close: ']', token: 'delimiter.square' },\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.square' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' },\n        { open: '<', close: '>', token: 'delimiter.angle' }\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    IDENTFST: /[a-zA-Z_]/,\n    IDENTRST: /[a-zA-Z0-9_'$]/,\n    symbolic: /[%&+-./:=@~`^|*!$#?<>]/,\n    digit: /[0-9]/,\n    digitseq0: /@digit*/,\n    xdigit: /[0-9A-Za-z]/,\n    xdigitseq0: /@xdigit*/,\n    INTSP: /[lLuU]/,\n    FLOATSP: /[fFlL]/,\n    fexponent: /[eE][+-]?[0-9]+/,\n    fexponent_bin: /[pP][+-]?[0-9]+/,\n    deciexp: /\\.[0-9]*@fexponent?/,\n    hexiexp: /\\.[0-9a-zA-Z]*@fexponent_bin?/,\n    irregular_keywords: /val[+-]?|case[+-]?|addr\\@?|fold\\@|free\\@|fix\\@?|lam\\@?|llam\\@?|prop[+-]?|type[+-]?|view[+-@]?|viewt@?ype[+-]?|t@?ype[+-]?|v(iew)?t@?ype[+-]?|abst@?ype|absv(iew)?t@?ype|for\\*?|while\\*?/,\n    ESCHAR: /[ntvbrfa\\\\\\?'\"\\(\\[\\{]/,\n    start: 'root',\n    // The main tokenizer for ATS/Postiats\n    // reference: https://github.com/githwxi/ATS-Postiats/blob/master/src/pats_lexing.dats\n    tokenizer: {\n        root: [\n            // lexing_blankseq0\n            { regex: /[ \\t\\r\\n]+/, action: { token: '' } },\n            // NOTE: (*) is an invalid ML-like comment!\n            { regex: /\\(\\*\\)/, action: { token: 'invalid' } },\n            { regex: /\\(\\*/, action: { token: 'comment', next: 'lexing_COMMENT_block_ml' } },\n            { regex: /\\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\n            { regex: /\\)/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\n            { regex: /\\[/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },\n            { regex: /\\]/, action: '@brackets' /*{ token: 'delimiter.bracket' }*/ },\n            { regex: /\\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\n            { regex: /\\}/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\n            // lexing_COMMA\n            { regex: /,\\(/, action: '@brackets' /*{ token: 'delimiter.parenthesis' }*/ },\n            { regex: /,/, action: { token: 'delimiter.comma' } },\n            { regex: /;/, action: { token: 'delimiter.semicolon' } },\n            // lexing_AT\n            { regex: /@\\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },\n            { regex: /@\\[/, action: '@brackets' /* { token: 'delimiter.bracket' }*/ },\n            { regex: /@\\{/, action: '@brackets' /*{ token: 'delimiter.brace' }*/ },\n            // lexing_COLON\n            { regex: /:</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },\n            /*\n            lexing_DOT:\n\n            . // SYMBOLIC => lexing_IDENT_sym\n            . FLOATDOT => lexing_FLOAT_deciexp\n            . DIGIT => T_DOTINT\n            */\n            { regex: /\\.@symbolic+/, action: { token: 'identifier.sym' } },\n            // FLOATDOT case\n            { regex: /\\.@digit*@fexponent@FLOATSP*/, action: { token: 'number.float' } },\n            { regex: /\\.@digit+/, action: { token: 'number.float' } },\n            // lexing_DOLLAR:\n            // '$' IDENTFST IDENTRST* => lexing_IDENT_dlr, _ => lexing_IDENT_sym\n            {\n                regex: /\\$@IDENTFST@IDENTRST*/,\n                action: {\n                    cases: {\n                        '@keywords_dlr': { token: 'keyword.dlr' },\n                        '@default': { token: 'namespace' },\n                    }\n                }\n            },\n            // lexing_SHARP:\n            // '#' IDENTFST IDENTRST* => lexing_ident_srp, _ => lexing_IDENT_sym\n            {\n                regex: /\\#@IDENTFST@IDENTRST*/,\n                action: {\n                    cases: {\n                        '@keywords_srp': { token: 'keyword.srp' },\n                        '@default': { token: 'identifier' },\n                    }\n                }\n            },\n            // lexing_PERCENT:\n            { regex: /%\\(/, action: { token: 'delimiter.parenthesis' } },\n            { regex: /^%{(#|\\^|\\$)?/, action: { token: 'keyword', next: '@lexing_EXTCODE', nextEmbedded: 'text/javascript' } },\n            { regex: /^%}/, action: { token: 'keyword' } },\n            // lexing_QUOTE\n            { regex: /'\\(/, action: { token: 'delimiter.parenthesis' } },\n            { regex: /'\\[/, action: { token: 'delimiter.bracket' } },\n            { regex: /'\\{/, action: { token: 'delimiter.brace' } },\n            [/(')(\\\\@ESCHAR|\\\\[xX]@xdigit+|\\\\@digit+)(')/, ['string', 'string.escape', 'string']],\n            [/'[^\\\\']'/, 'string'],\n            // lexing_DQUOTE\n            [/\"/, 'string.quote', '@lexing_DQUOTE'],\n            // lexing_BQUOTE\n            { regex: /`\\(/, action: '@brackets' /* { token: 'delimiter.parenthesis' }*/ },\n            // TODO: otherwise, try lexing_IDENT_sym\n            { regex: /\\\\/, action: { token: 'punctuation' } },\n            // lexing_IDENT_alp:\n            // NOTE: (?!regex) is syntax for \"not-followed-by\" regex\n            // to resolve ambiguity such as foreach$fwork being incorrectly lexed as [for] [each$fwork]!\n            { regex: /@irregular_keywords(?!@IDENTRST)/, action: { token: 'keyword' } },\n            {\n                regex: /@IDENTFST@IDENTRST*[<!\\[]?/,\n                action: {\n                    cases: {\n                        // TODO: dynload and staload should be specially parsed\n                        // dynload whitespace+ \"special_string\"\n                        // this special string is really:\n                        //  '/' '\\\\' '.' => punctuation\n                        // ({\\$)([a-zA-Z_][a-zA-Z_0-9]*)(}) => punctuation,keyword,punctuation\n                        // [^\"] => identifier/literal\n                        '@keywords': { token: 'keyword' },\n                        '@keywords_types': { token: 'type' },\n                        '@default': { token: 'identifier' }\n                    }\n                }\n            },\n            // lexing_IDENT_sym:\n            { regex: /\\/\\/\\/\\//, action: { token: 'comment', next: '@lexing_COMMENT_rest' } },\n            { regex: /\\/\\/.*$/, action: { token: 'comment' } },\n            { regex: /\\/\\*/, action: { token: 'comment', next: '@lexing_COMMENT_block_c' } },\n            // AS-20160627: specifically for effect annotations\n            { regex: /-<|=</, action: { token: 'keyword', next: '@lexing_EFFECT_commaseq0' } },\n            {\n                regex: /@symbolic+/,\n                action: {\n                    cases: {\n                        '@operators': 'keyword',\n                        '@default': 'operator'\n                    }\n                }\n            },\n            // lexing_ZERO:\n            // FIXME: this one is quite messy/unfinished yet\n            // TODO: lexing_INT_hex\n            // - testing_hexiexp => lexing_FLOAT_hexiexp\n            // - testing_fexponent_bin => lexing_FLOAT_hexiexp\n            // - testing_intspseq0 => T_INT_hex\n            // lexing_INT_hex:\n            { regex: /0[xX]@xdigit+(@hexiexp|@fexponent_bin)@FLOATSP*/, action: { token: 'number.float' } },\n            { regex: /0[xX]@xdigit+@INTSP*/, action: { token: 'number.hex' } },\n            { regex: /0[0-7]+(?![0-9])@INTSP*/, action: { token: 'number.octal' } },\n            //{regex: /0/, action: { token: 'number' } }, // INTZERO\n            // lexing_INT_dec:\n            // - testing_deciexp => lexing_FLOAT_deciexp\n            // - testing_fexponent => lexing_FLOAT_deciexp\n            // - otherwise => intspseq0 ([0-9]*[lLuU]?)\n            { regex: /@digit+(@fexponent|@deciexp)@FLOATSP*/, action: { token: 'number.float' } },\n            { regex: /@digit@digitseq0@INTSP*/, action: { token: 'number.decimal' } },\n            // DIGIT, if followed by digitseq0, is lexing_INT_dec\n            { regex: /@digit+@INTSP*/, action: { token: 'number' } },\n        ],\n        lexing_COMMENT_block_ml: [\n            [/[^\\(\\*]+/, 'comment'],\n            [/\\(\\*/, 'comment', '@push'],\n            [/\\(\\*/, 'comment.invalid'],\n            [/\\*\\)/, 'comment', '@pop'],\n            [/\\*/, 'comment']\n        ],\n        lexing_COMMENT_block_c: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/, 'comment', '@push' ],    // nested C-style block comments not allowed\n            // [/\\/\\*/,    'comment.invalid' ],\t// NOTE: this breaks block comments in the shape of /* //*/\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        lexing_COMMENT_rest: [\n            [/$/, 'comment', '@pop'],\n            [/.*/, 'comment']\n        ],\n        // NOTE: added by AS, specifically for highlighting\n        lexing_EFFECT_commaseq0: [\n            {\n                regex: /@IDENTFST@IDENTRST+|@digit+/,\n                action: {\n                    cases: {\n                        '@keywords_effects': { token: 'type.effect' },\n                        '@default': { token: 'identifier' }\n                    }\n                }\n            },\n            { regex: /,/, action: { token: 'punctuation' } },\n            { regex: />/, action: { token: '@rematch', next: '@pop' } },\n        ],\n        lexing_EXTCODE: [\n            { regex: /^%}/, action: { token: '@rematch', next: '@pop', nextEmbedded: '@pop' } },\n            { regex: /[^%]+/, action: '' },\n        ],\n        lexing_DQUOTE: [\n            { regex: /\"/, action: { token: 'string.quote', next: '@pop' } },\n            // AS-20160628: additional hi-lighting for variables in staload/dynload strings\n            { regex: /(\\{\\$)(@IDENTFST@IDENTRST*)(\\})/, action: [{ token: 'string.escape' }, { token: 'identifier' }, { token: 'string.escape' }] },\n            { regex: /\\\\$/, action: { token: 'string.escape' } },\n            { regex: /\\\\(@ESCHAR|[xX]@xdigit+|@digit+)/, action: { token: 'string.escape' } },\n            { regex: /[^\\\\\"]+/, action: { token: 'string' } }\n        ],\n    },\n};\n"]}