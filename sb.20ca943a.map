{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/sb/sb.js"],"names":["conf","comments","lineComment","brackets","autoClosingPairs","open","close","notIn","language","defaultToken","tokenPostfix","ignoreCase","token","keywords","tagwords","operators","identifier","symbols","escapes","tokenizer","root","include","cases","whitespace","string"],"mappings":";AAAA;;;;AAIA;;;;;AACO,IAAIA,sBAAO;AACdC,cAAU;AACNC,qBAAa;AADP,KADI;AAIdC,cAAU,CACN,CAAC,GAAD,EAAM,GAAN,CADM,EACM,CAAC,GAAD,EAAM,GAAN,CADN,EAEN,CAAC,IAAD,EAAO,OAAP,CAFM,EAGN,CAAC,OAAD,EAAU,UAAV,CAHM,EAIN,CAAC,KAAD,EAAQ,QAAR,CAJM,EAKN,CAAC,KAAD,EAAQ,QAAR,CALM,CAJI;AAWdC,sBAAkB,CACd,EAAEC,MAAM,GAAR,EAAaC,OAAO,GAApB,EAAyBC,OAAO,CAAC,QAAD,EAAW,SAAX,CAAhC,EADc,EAEd,EAAEF,MAAM,GAAR,EAAaC,OAAO,GAApB,EAAyBC,OAAO,CAAC,QAAD,EAAW,SAAX,CAAhC,EAFc,EAGd,EAAEF,MAAM,GAAR,EAAaC,OAAO,GAApB,EAAyBC,OAAO,CAAC,QAAD,EAAW,SAAX,CAAhC,EAHc;AAXJ,CAAX;AAiBA,IAAIC,8BAAW;AAClBC,kBAAc,EADI;AAElBC,kBAAc,KAFI;AAGlBC,gBAAY,IAHM;AAIlBR,cAAU,CACN,EAAES,OAAO,iBAAT,EAA4BP,MAAM,GAAlC,EAAuCC,OAAO,GAA9C,EADM,EAEN,EAAEM,OAAO,uBAAT,EAAkCP,MAAM,GAAxC,EAA6CC,OAAO,GAApD,EAFM;AAGN;AACA,MAAEM,OAAO,gBAAT,EAA2BP,MAAM,IAAjC,EAAuCC,OAAO,OAA9C,EAJM,EAKN,EAAEM,OAAO,mBAAT,EAA8BP,MAAM,OAApC,EAA6CC,OAAO,UAApD,EALM,EAMN,EAAEM,OAAO,iBAAT,EAA4BP,MAAM,KAAlC,EAAyCC,OAAO,QAAhD,EANM,EAON,EAAEM,OAAO,iBAAT,EAA4BP,MAAM,KAAlC,EAAyCC,OAAO,QAAhD,EAPM,CAJQ;AAalBO,cAAU,CACN,MADM,EACE,QADF,EACY,QADZ,EACsB,OADtB,EAC+B,QAD/B,EACyC,UADzC,EAEN,KAFM,EAEC,MAFD,EAES,IAFT,EAEe,MAFf,EAEuB,KAFvB,EAE8B,MAF9B,EAEsC,IAFtC,EAE4C,OAF5C,CAbQ;AAiBlBC,cAAU,CACN,IADM,EACA,KADA,EACO,OADP,EACgB,KADhB,CAjBQ;AAoBlBC,eAAW,CAAC,GAAD,EAAM,GAAN,EAAW,IAAX,EAAiB,IAAjB,EAAuB,IAAvB,EAA6B,KAA7B,EAAoC,IAApC,EAA0C,GAA1C,EAA+C,GAA/C,EAAoD,GAApD,EAAyD,GAAzD,EAA8D,GAA9D,CApBO;AAqBlB;AACAC,gBAAY,gBAtBM;AAuBlBC,aAAS,mBAvBS;AAwBlBC,aAAS,uEAxBS;AAyBlB;AACAC,eAAW;AACPC,cAAM;AACF;AACA,UAAEC,SAAS,aAAX,EAFE;AAGF;AACA,SAAC,sBAAD,EAAyB,MAAzB,CAJE;AAKF;AACA,SAAC,aAAD,EAAgB;AACRC,mBAAO;AACH,6BAAa,EAAEV,OAAO,YAAT,EADV;AAEH,8BAAc,UAFX;AAGH,4BAAY;AAHT;AADC,SAAhB,CANE;AAaF;AACA,SAAC,oBAAD,EAAuB;AACfU,mBAAO;AACH,sBAAM,CAAC,WAAD,EAAc,aAAd,CADH;AAEH,4BAAY;AAFT;AADQ,SAAvB,CAdE;AAoBF;AACA,SAAC,UAAD,EAAa,cAAb,CArBE,EAsBF,CAAC,KAAD,EAAQ,QAAR,CAtBE;AAuBF;AACA,SAAC,UAAD,EAAa,WAAb,CAxBE,EAyBF,CAAC,UAAD,EAAa;AACLA,mBAAO;AACH,8BAAc,UADX;AAEH,4BAAY;AAFT;AADF,SAAb,CAzBE;AA+BF;AACA,SAAC,iBAAD,EAAoB,gBAApB,CAhCE,EAiCF,CAAC,GAAD,EAAM,QAAN,EAAgB,SAAhB,CAjCE,CADC;AAoCPC,oBAAY,CACR,CAAC,YAAD,EAAe,EAAf,CADQ,EAER,CAAC,SAAD,EAAY,SAAZ,CAFQ,CApCL;AAwCPC,gBAAQ,CACJ,CAAC,SAAD,EAAY,QAAZ,CADI,EAEJ,CAAC,UAAD,EAAa,eAAb,CAFI,EAGJ,CAAC,KAAD,EAAQ,uBAAR,CAHI,EAIJ,CAAC,KAAD,EAAQ,QAAR,EAAkB,MAAlB,CAJI;AAxCD;AA1BO,CAAf","file":"sb.20ca943a.map","sourceRoot":"../public","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '\\'',\n    },\n    brackets: [\n        ['(', ')'], ['[', ']'],\n        ['If', 'EndIf'],\n        ['While', 'EndWhile'],\n        ['For', 'EndFor'],\n        ['Sub', 'EndSub']\n    ],\n    autoClosingPairs: [\n        { open: '\"', close: '\"', notIn: ['string', 'comment'] },\n        { open: '(', close: ')', notIn: ['string', 'comment'] },\n        { open: '[', close: ']', notIn: ['string', 'comment'] },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.sb',\n    ignoreCase: true,\n    brackets: [\n        { token: 'delimiter.array', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' },\n        // Special bracket statement pairs\n        { token: 'keyword.tag-if', open: 'If', close: 'EndIf' },\n        { token: 'keyword.tag-while', open: 'While', close: 'EndWhile' },\n        { token: 'keyword.tag-for', open: 'For', close: 'EndFor' },\n        { token: 'keyword.tag-sub', open: 'Sub', close: 'EndSub' },\n    ],\n    keywords: [\n        'Else', 'ElseIf', 'EndFor', 'EndIf', 'EndSub', 'EndWhile',\n        'For', 'Goto', 'If', 'Step', 'Sub', 'Then', 'To', 'While'\n    ],\n    tagwords: [\n        'If', 'Sub', 'While', 'For'\n    ],\n    operators: ['>', '<', '<>', '<=', '>=', 'And', 'Or', '+', '-', '*', '/', '='],\n    // we include these common regular expressions\n    identifier: /[a-zA-Z_][\\w]*/,\n    symbols: /[=><:+\\-*\\/%\\.,]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // whitespace\n            { include: '@whitespace' },\n            // classes\n            [/(@identifier)(?=[.])/, 'type'],\n            // identifiers, tagwords, and keywords\n            [/@identifier/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@operators': 'operator',\n                        '@default': 'variable.name'\n                    }\n                }],\n            // methods, properties, and events\n            [/([.])(@identifier)/, {\n                    cases: {\n                        '$2': ['delimiter', 'type.member'],\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\.\\d+/, 'number.float'],\n            [/\\d+/, 'number'],\n            // delimiters and operators\n            [/[()\\[\\]]/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'operator',\n                        '@default': 'delimiter'\n                    }\n                }],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/(\\').*$/, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"C?/, 'string', '@pop']\n        ],\n    },\n};\n"]}