{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/python/python.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","offSide","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","token","tokenizer","root","include","cases","whitespace","endDocString","endDblDocString","numbers","strings","stringBody","dblStringBody"],"mappings":"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","file":"python.48c95399.map","sourceRoot":"../public","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '#',\n        blockComment: ['\\'\\'\\'', '\\'\\'\\''],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"', notIn: ['string'] },\n        { open: '\\'', close: '\\'', notIn: ['string', 'comment'] },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    folding: {\n        offSide: true,\n        markers: {\n            start: new RegExp(\"^\\\\s*#region\\\\b\"),\n            end: new RegExp(\"^\\\\s*#endregion\\\\b\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.python',\n    keywords: [\n        'and',\n        'as',\n        'assert',\n        'break',\n        'class',\n        'continue',\n        'def',\n        'del',\n        'elif',\n        'else',\n        'except',\n        'exec',\n        'finally',\n        'for',\n        'from',\n        'global',\n        'if',\n        'import',\n        'in',\n        'is',\n        'lambda',\n        'None',\n        'not',\n        'or',\n        'pass',\n        'print',\n        'raise',\n        'return',\n        'self',\n        'try',\n        'while',\n        'with',\n        'yield',\n        'int',\n        'float',\n        'long',\n        'complex',\n        'hex',\n        'abs',\n        'all',\n        'any',\n        'apply',\n        'basestring',\n        'bin',\n        'bool',\n        'buffer',\n        'bytearray',\n        'callable',\n        'chr',\n        'classmethod',\n        'cmp',\n        'coerce',\n        'compile',\n        'complex',\n        'delattr',\n        'dict',\n        'dir',\n        'divmod',\n        'enumerate',\n        'eval',\n        'execfile',\n        'file',\n        'filter',\n        'format',\n        'frozenset',\n        'getattr',\n        'globals',\n        'hasattr',\n        'hash',\n        'help',\n        'id',\n        'input',\n        'intern',\n        'isinstance',\n        'issubclass',\n        'iter',\n        'len',\n        'locals',\n        'list',\n        'map',\n        'max',\n        'memoryview',\n        'min',\n        'next',\n        'object',\n        'oct',\n        'open',\n        'ord',\n        'pow',\n        'print',\n        'property',\n        'reversed',\n        'range',\n        'raw_input',\n        'reduce',\n        'reload',\n        'repr',\n        'reversed',\n        'round',\n        'set',\n        'setattr',\n        'slice',\n        'sorted',\n        'staticmethod',\n        'str',\n        'sum',\n        'super',\n        'tuple',\n        'type',\n        'unichr',\n        'unicode',\n        'vars',\n        'xrange',\n        'zip',\n        'True',\n        'False',\n        '__dict__',\n        '__methods__',\n        '__members__',\n        '__class__',\n        '__bases__',\n        '__name__',\n        '__mro__',\n        '__subclasses__',\n        '__init__',\n        '__import__'\n    ],\n    brackets: [\n        { open: '{', close: '}', token: 'delimiter.curly' },\n        { open: '[', close: ']', token: 'delimiter.bracket' },\n        { open: '(', close: ')', token: 'delimiter.parenthesis' }\n    ],\n    tokenizer: {\n        root: [\n            { include: '@whitespace' },\n            { include: '@numbers' },\n            { include: '@strings' },\n            [/[,:;]/, 'delimiter'],\n            [/[{}\\[\\]()]/, '@brackets'],\n            [/@[a-zA-Z]\\w*/, 'tag'],\n            [/[a-zA-Z]\\w*/, {\n                    cases: {\n                        '@keywords': 'keyword',\n                        '@default': 'identifier'\n                    }\n                }]\n        ],\n        // Deal with white space, including single and multi-line comments\n        whitespace: [\n            [/\\s+/, 'white'],\n            [/(^#.*$)/, 'comment'],\n            [/('''.*''')|(\"\"\".*\"\"\")/, 'string'],\n            [/'''.*$/, 'string', '@endDocString'],\n            [/\"\"\".*$/, 'string', '@endDblDocString']\n        ],\n        endDocString: [\n            [/\\\\'/, 'string'],\n            [/.*'''/, 'string', '@popall'],\n            [/.*$/, 'string']\n        ],\n        endDblDocString: [\n            [/\\\\\"/, 'string'],\n            [/.*\"\"\"/, 'string', '@popall'],\n            [/.*$/, 'string']\n        ],\n        // Recognize hex, negatives, decimals, imaginaries, longs, and scientific notation\n        numbers: [\n            [/-?0x([abcdef]|[ABCDEF]|\\d)+[lL]?/, 'number.hex'],\n            [/-?(\\d*\\.)?\\d+([eE][+\\-]?\\d+)?[jJ]?[lL]?/, 'number']\n        ],\n        // Recognize strings, including those broken across lines with \\ (but not without)\n        strings: [\n            [/'$/, 'string.escape', '@popall'],\n            [/'/, 'string.escape', '@stringBody'],\n            [/\"$/, 'string.escape', '@popall'],\n            [/\"/, 'string.escape', '@dblStringBody']\n        ],\n        stringBody: [\n            [/\\\\./, 'string'],\n            [/'/, 'string.escape', '@popall'],\n            [/.(?=.*')/, 'string'],\n            [/.*\\\\$/, 'string'],\n            [/.*$/, 'string', '@popall']\n        ],\n        dblStringBody: [\n            [/\\\\./, 'string'],\n            [/\"/, 'string.escape', '@popall'],\n            [/.(?=.*\")/, 'string'],\n            [/.*\\\\$/, 'string'],\n            [/.*$/, 'string', '@popall']\n        ]\n    }\n};\n"]}