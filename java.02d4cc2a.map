{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/java/java.js"],"names":["conf","wordPattern","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","folding","markers","start","RegExp","end","language","defaultToken","tokenPostfix","keywords","operators","symbols","escapes","digits","octaldigits","binarydigits","hexdigits","tokenizer","root","cases","token","include","whitespace","comment","javadoc","string"],"mappings":";AAAA;;;;AAIA;;;;;AACO,IAAIA,sBAAO;AACd;AACAC,iBAAa,oFAFC;AAGdC,cAAU;AACNC,qBAAa,IADP;AAENC,sBAAc,CAAC,IAAD,EAAO,IAAP;AAFR,KAHI;AAOdC,cAAU,CACN,CAAC,GAAD,EAAM,GAAN,CADM,EAEN,CAAC,GAAD,EAAM,GAAN,CAFM,EAGN,CAAC,GAAD,EAAM,GAAN,CAHM,CAPI;AAYdC,sBAAkB,CACd,EAAEC,MAAM,GAAR,EAAaC,OAAO,GAApB,EADc,EAEd,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EAFc,EAGd,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EAHc,EAId,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EAJc,EAKd,EAAED,MAAM,IAAR,EAAcC,OAAO,IAArB,EALc,CAZJ;AAmBdC,sBAAkB,CACd,EAAEF,MAAM,GAAR,EAAaC,OAAO,GAApB,EADc,EAEd,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EAFc,EAGd,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EAHc,EAId,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EAJc,EAKd,EAAED,MAAM,IAAR,EAAcC,OAAO,IAArB,EALc,EAMd,EAAED,MAAM,GAAR,EAAaC,OAAO,GAApB,EANc,CAnBJ;AA2BdE,aAAS;AACLC,iBAAS;AACLC,mBAAO,IAAIC,MAAJ,CAAW,oDAAX,CADF;AAELC,iBAAK,IAAID,MAAJ,CAAW,sDAAX;AAFA;AADJ;AA3BK,CAAX;AAkCA,IAAIE,8BAAW;AAClBC,kBAAc,EADI;AAElBC,kBAAc,OAFI;AAGlBC,cAAU,CACN,UADM,EACM,UADN,EACkB,KADlB,EACyB,KADzB,EACgC,QADhC,EAC0C,QAD1C,EACoD,SADpD,EAEN,MAFM,EAEE,SAFF,EAEa,cAFb,EAE6B,SAF7B,EAEwC,IAFxC,EAE8C,IAF9C,EAEoD,SAFpD,EAGN,MAHM,EAGE,OAHF,EAGW,QAHX,EAGqB,YAHrB,EAGmC,WAHnC,EAGgD,OAHhD,EAGyD,MAHzD,EAIN,MAJM,EAIE,QAJF,EAIY,QAJZ,EAIsB,QAJtB,EAIgC,MAJhC,EAIwC,MAJxC,EAIgD,YAJhD,EAI8D,QAJ9D,EAKN,WALM,EAKO,OALP,EAKgB,SALhB,EAK2B,KAL3B,EAKkC,OALlC,EAK2C,KAL3C,EAKkD,MALlD,EAK0D,OAL1D,EAMN,WANM,EAMO,QANP,EAMiB,MANjB,EAMyB,OANzB,EAMkC,SANlC,EAM6C,MAN7C,EAMqD,UANrD,EAON,UAPM,EAOM,OAPN,EAOe,OAPf,EAOwB,QAPxB,EAOkC,OAPlC,EAO2C,OAP3C,EAOoD,MAPpD,EAO4D,OAP5D,CAHQ;AAYlBC,eAAW,CACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,GADb,EACkB,GADlB,EACuB,GADvB,EAEP,IAFO,EAED,IAFC,EAEK,IAFL,EAEW,IAFX,EAEiB,IAFjB,EAEuB,IAFvB,EAE6B,IAF7B,EAEmC,IAFnC,EAGP,GAHO,EAGF,GAHE,EAGG,GAHH,EAGQ,GAHR,EAGa,GAHb,EAGkB,GAHlB,EAGuB,GAHvB,EAG4B,GAH5B,EAGiC,IAHjC,EAIP,IAJO,EAID,KAJC,EAIM,IAJN,EAIY,IAJZ,EAIkB,IAJlB,EAIwB,IAJxB,EAI8B,IAJ9B,EAIoC,IAJpC,EAKP,IALO,EAKD,IALC,EAKK,KALL,EAKY,KALZ,EAKmB,MALnB,CAZO;AAmBlB;AACAC,aAAS,uBApBS;AAqBlBC,aAAS,uEArBS;AAsBlBC,YAAQ,aAtBU;AAuBlBC,iBAAa,mBAvBK;AAwBlBC,kBAAc,mBAxBI;AAyBlBC,eAAW,gCAzBO;AA0BlB;AACAC,eAAW;AACPC,cAAM;AACF;AACA,SAAC,kBAAD,EAAqB;AACbC,mBAAO;AACH,6BAAa,EAAEC,OAAO,YAAT,EADV;AAEH,4BAAY;AAFT;AADM,SAArB,CAFE;AAQF;AACA,UAAEC,SAAS,aAAX,EATE;AAUF;AACA,SAAC,YAAD,EAAe,WAAf,CAXE,EAYF,CAAC,kBAAD,EAAqB,WAArB,CAZE,EAaF,CAAC,UAAD,EAAa;AACLF,mBAAO;AACH,8BAAc,WADX;AAEH,4BAAY;AAFT;AADF,SAAb,CAbE;AAmBF;AACA,SAAC,wBAAD,EAA2B,YAA3B,CApBE;AAqBF;AACA,SAAC,wCAAD,EAA2C,cAA3C,CAtBE,EAuBF,CAAC,mDAAD,EAAsD,cAAtD,CAvBE,EAwBF,CAAC,wBAAD,EAA2B,YAA3B,CAxBE,EAyBF,CAAC,sBAAD,EAAyB,cAAzB,CAzBE,EA0BF,CAAC,2BAAD,EAA8B,eAA9B,CA1BE,EA2BF,CAAC,iBAAD,EAAoB,cAApB,CA3BE,EA4BF,CAAC,gBAAD,EAAmB,QAAnB,CA5BE;AA6BF;AACA,SAAC,OAAD,EAAU,WAAV,CA9BE;AA+BF;AACA,SAAC,iBAAD,EAAoB,gBAApB,CAhCE,EAiCF,CAAC,GAAD,EAAM,QAAN,EAAgB,SAAhB,CAjCE;AAkCF;AACA,SAAC,UAAD,EAAa,QAAb,CAnCE,EAoCF,CAAC,kBAAD,EAAqB,CAAC,QAAD,EAAW,eAAX,EAA4B,QAA5B,CAArB,CApCE,EAqCF,CAAC,GAAD,EAAM,gBAAN,CArCE,CADC;AAwCPG,oBAAY,CACR,CAAC,YAAD,EAAe,EAAf,CADQ,EAER,CAAC,cAAD,EAAiB,aAAjB,EAAgC,UAAhC,CAFQ,EAGR,CAAC,MAAD,EAAS,SAAT,EAAoB,UAApB,CAHQ,EAIR,CAAC,SAAD,EAAY,SAAZ,CAJQ,CAxCL;AA8CPC,iBAAS,CACL,CAAC,SAAD,EAAY,SAAZ,CADK;AAEL;AACA;AACA,SAAC,MAAD,EAAS,SAAT,EAAoB,MAApB,CAJK,EAKL,CAAC,OAAD,EAAU,SAAV,CALK,CA9CF;AAqDP;AACAC,iBAAS,CACL,CAAC,SAAD,EAAY,aAAZ,CADK;AAEL;AACA,SAAC,MAAD,EAAS,qBAAT,CAHK,EAIL,CAAC,MAAD,EAAS,aAAT,EAAwB,MAAxB,CAJK,EAKL,CAAC,OAAD,EAAU,aAAV,CALK,CAtDF;AA6DPC,gBAAQ,CACJ,CAAC,SAAD,EAAY,QAAZ,CADI,EAEJ,CAAC,UAAD,EAAa,eAAb,CAFI,EAGJ,CAAC,KAAD,EAAQ,uBAAR,CAHI,EAIJ,CAAC,GAAD,EAAM,QAAN,EAAgB,MAAhB,CAJI;AA7DD;AA3BO,CAAf","file":"java.02d4cc2a.map","sourceRoot":"../public","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    // the default separators except `@$`\n    wordPattern: /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g,\n    comments: {\n        lineComment: '//',\n        blockComment: ['/*', '*/'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')'],\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n        { open: '<', close: '>' },\n    ],\n    folding: {\n        markers: {\n            start: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?region\\\\b)|(?:<editor-fold\\\\b))\"),\n            end: new RegExp(\"^\\\\s*//\\\\s*(?:(?:#?endregion\\\\b)|(?:</editor-fold>))\")\n        }\n    }\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.java',\n    keywords: [\n        'abstract', 'continue', 'for', 'new', 'switch', 'assert', 'default',\n        'goto', 'package', 'synchronized', 'boolean', 'do', 'if', 'private',\n        'this', 'break', 'double', 'implements', 'protected', 'throw', 'byte',\n        'else', 'import', 'public', 'throws', 'case', 'enum', 'instanceof', 'return',\n        'transient', 'catch', 'extends', 'int', 'short', 'try', 'char', 'final',\n        'interface', 'static', 'void', 'class', 'finally', 'long', 'strictfp',\n        'volatile', 'const', 'float', 'native', 'super', 'while', 'true', 'false'\n    ],\n    operators: [\n        '=', '>', '<', '!', '~', '?', ':',\n        '==', '<=', '>=', '!=', '&&', '||', '++', '--',\n        '+', '-', '*', '/', '&', '|', '^', '%', '<<',\n        '>>', '>>>', '+=', '-=', '*=', '/=', '&=', '|=',\n        '^=', '%=', '<<=', '>>=', '>>>='\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    digits: /\\d+(_+\\d+)*/,\n    octaldigits: /[0-7]+(_+[0-7]+)*/,\n    binarydigits: /[0-1]+(_+[0-1]+)*/,\n    hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/[a-zA-Z_$][\\w$]*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/[<>](?!@symbols)/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // @ annotations.\n            [/@\\s*[a-zA-Z_\\$][\\w\\$]*/, 'annotation'],\n            // numbers\n            [/(@digits)[eE]([\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n            [/(@digits)\\.(@digits)([eE][\\-+]?(@digits))?[fFdD]?/, 'number.float'],\n            [/0[xX](@hexdigits)[Ll]?/, 'number.hex'],\n            [/0(@octaldigits)[Ll]?/, 'number.octal'],\n            [/0[bB](@binarydigits)[Ll]?/, 'number.binary'],\n            [/(@digits)[fFdD]/, 'number.float'],\n            [/(@digits)[lL]?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string'],\n            // characters\n            [/'[^\\\\']'/, 'string'],\n            [/(')(@escapes)(')/, ['string', 'string.escape', 'string']],\n            [/'/, 'string.invalid']\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/\\/\\*\\*(?!\\/)/, 'comment.doc', '@javadoc'],\n            [/\\/\\*/, 'comment', '@comment'],\n            [/\\/\\/.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^\\/*]+/, 'comment'],\n            // [/\\/\\*/, 'comment', '@push' ],    // nested comment not allowed :-(\n            // [/\\/\\*/,    'comment.invalid' ],    // this breaks block comments in the shape of /* //*/\n            [/\\*\\//, 'comment', '@pop'],\n            [/[\\/*]/, 'comment']\n        ],\n        //Identical copy of comment above, except for the addition of .doc\n        javadoc: [\n            [/[^\\/*]+/, 'comment.doc'],\n            // [/\\/\\*/, 'comment.doc', '@push' ],    // nested comment not allowed :-(\n            [/\\/\\*/, 'comment.doc.invalid'],\n            [/\\*\\//, 'comment.doc', '@pop'],\n            [/[\\/*]/, 'comment.doc']\n        ],\n        string: [\n            [/[^\\\\\"]+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/\"/, 'string', '@pop']\n        ],\n    },\n};\n"]}