{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/lua/lua.js"],"names":["conf","comments","lineComment","blockComment","brackets","autoClosingPairs","open","close","surroundingPairs","language","defaultToken","tokenPostfix","keywords","token","operators","symbols","escapes","tokenizer","root","cases","include","whitespace","comment","next","string"],"mappings":"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","file":"lua.acef18a0.map","sourceRoot":"../public","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\nexport var conf = {\n    comments: {\n        lineComment: '--',\n        blockComment: ['--[[', ']]'],\n    },\n    brackets: [\n        ['{', '}'],\n        ['[', ']'],\n        ['(', ')']\n    ],\n    autoClosingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ],\n    surroundingPairs: [\n        { open: '{', close: '}' },\n        { open: '[', close: ']' },\n        { open: '(', close: ')' },\n        { open: '\"', close: '\"' },\n        { open: '\\'', close: '\\'' },\n    ]\n};\nexport var language = {\n    defaultToken: '',\n    tokenPostfix: '.lua',\n    keywords: [\n        'and', 'break', 'do', 'else', 'elseif',\n        'end', 'false', 'for', 'function', 'goto', 'if',\n        'in', 'local', 'nil', 'not', 'or',\n        'repeat', 'return', 'then', 'true', 'until',\n        'while'\n    ],\n    brackets: [\n        { token: 'delimiter.bracket', open: '{', close: '}' },\n        { token: 'delimiter.array', open: '[', close: ']' },\n        { token: 'delimiter.parenthesis', open: '(', close: ')' }\n    ],\n    operators: [\n        '+', '-', '*', '/', '%', '^', '#', '==', '~=', '<=', '>=', '<', '>', '=',\n        ';', ':', ',', '.', '..', '...'\n    ],\n    // we include these common regular expressions\n    symbols: /[=><!~?:&|+\\-*\\/\\^%]+/,\n    escapes: /\\\\(?:[abfnrtv\\\\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,\n    // The main tokenizer for our languages\n    tokenizer: {\n        root: [\n            // identifiers and keywords\n            [/[a-zA-Z_]\\w*/, {\n                    cases: {\n                        '@keywords': { token: 'keyword.$0' },\n                        '@default': 'identifier'\n                    }\n                }],\n            // whitespace\n            { include: '@whitespace' },\n            // keys\n            [/(,)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['delimiter', '', 'key', '', 'delimiter']],\n            [/({)(\\s*)([a-zA-Z_]\\w*)(\\s*)(:)(?!:)/, ['@brackets', '', 'key', '', 'delimiter']],\n            // delimiters and operators\n            [/[{}()\\[\\]]/, '@brackets'],\n            [/@symbols/, {\n                    cases: {\n                        '@operators': 'delimiter',\n                        '@default': ''\n                    }\n                }],\n            // numbers\n            [/\\d*\\.\\d+([eE][\\-+]?\\d+)?/, 'number.float'],\n            [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, 'number.hex'],\n            [/\\d+?/, 'number'],\n            // delimiter: after number because of .\\d floats\n            [/[;,.]/, 'delimiter'],\n            // strings: recover on non-terminated strings\n            [/\"([^\"\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/'([^'\\\\]|\\\\.)*$/, 'string.invalid'],\n            [/\"/, 'string', '@string.\"'],\n            [/'/, 'string', '@string.\\''],\n        ],\n        whitespace: [\n            [/[ \\t\\r\\n]+/, ''],\n            [/--\\[([=]*)\\[/, 'comment', '@comment.$1'],\n            [/--.*$/, 'comment'],\n        ],\n        comment: [\n            [/[^\\]]+/, 'comment'],\n            [/\\]([=]*)\\]/, {\n                    cases: {\n                        '$1==$S2': { token: 'comment', next: '@pop' },\n                        '@default': 'comment'\n                    }\n                }],\n            [/./, 'comment']\n        ],\n        string: [\n            [/[^\\\\\"']+/, 'string'],\n            [/@escapes/, 'string.escape'],\n            [/\\\\./, 'string.escape.invalid'],\n            [/[\"']/, {\n                    cases: {\n                        '$#==$S2': { token: 'string', next: '@pop' },\n                        '@default': 'string'\n                    }\n                }]\n        ],\n    },\n};\n"]}